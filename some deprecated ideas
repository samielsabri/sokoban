 # dont do next position, look as the state as it is. identify any corners for the boxes for each box, but you
            # cannot precompute
            # but why use the directions then???

    # do an assignment logic: any storage point should be assigned to its nearest box
    # then calculate the distance of each box to its assigned storage point (consider obstacles)
    # consider each storage point and find whether there is a wall attached to it (but why?)

potential_deadlocks = set()
    for box_pos in boxes:
        for direction in directions:
            next_pos = direction.move(box_pos)
            if next_pos in obstacles or next_pos in boxes or next_pos in corners:
                # Box would be blocked in this direction
                potential_deadlocks.add(box_pos)
                break

 # Calculate heuristic value
    for box_pos in boxes:
        min_distance_to_storage = float('inf')
        if box_pos not in storage_points:
            
            for storage_pos in storage_points:
                if storage_pos not in boxes:
                    distance = calculate_manhattan_distance_with_obstacles(box_pos, storage_pos, obstacles)
                    min_distance_to_storage = min(min_distance_to_storage, distance)
            
            if box_pos in potential_deadlocks:
                total_distance += min_distance_to_storage * 2  # Punish for potential deadlocks
            else:
                total_distance += min_distance_to_storage
    
    return total_distance

# def generate_corners(width, height, boxes, obstacles, storage_points, robots):
#     corners = set()
    # UP = Direction("up", (0, -1))
    # RIGHT = Direction("right", (1, 0))
    # DOWN = Direction("down", (0, 1))
    # LEFT = Direction("left", (-1, 0))
#     for x in range(width):
#         for y in range(height):
#             # Check if the current position is not already occupied by a box or obstacle
#             if (x, y) not in boxes and (x, y) not in obstacles and (x, y) not in storage_points:
#                 # Count the number of blocked sides
#                 blocked_sides = 0

#                 # Check top side
#                 if y == height - 1 or (x, y + 1) in boxes or (x, y + 1) in obstacles or (x, y + 1) in robots:
#                     blocked_sides += 1

#                 # Check right side
#                 if x == width - 1 or (x + 1, y) in boxes or (x + 1, y) in obstacles or (x + 1, y) in robots:
#                     blocked_sides += 1

#                 # Check bottom side
#                 if y == 0 or (x, y - 1) in boxes or (x, y - 1) in obstacles or (x, y - 1) in robots:
#                     blocked_sides += 1

#                 # Check left side
#                 if x == 0 or (x - 1, y) in boxes or (x - 1, y) in obstacles or (x - 1, y) in robots:
#                     blocked_sides += 1

#                 # If at least two sides are blocked and they are adjacent, add the position to corners set
#                 if blocked_sides > 2:
                    # corners.add((x, y))


#                     

#     return corners

  assignments = assign_storage_to_boxes(state) # create dictionary of box to storage point assignments

    for box, (storage, distance) in assignments.items():

        if is_box_deadlocked(box, obstacles, height, width):
            total_distance += float('inf')

        total_distance += distance
        if total_distance == float('inf'):
            return total_distance

    return total_distance


def assign_storage_to_boxes(state):
    '''Assign each storage point to its nearest box.'''
    assignments = {}
    remaining_storages = set(state.storage)
    remaining_boxes = set(state.boxes)
    
    
    def f():
        for box in state.boxes:
            is_edge, edge_type = is_edge_box(box, state.width, state.height)
            if is_edge:
                if edge_type in ["left", "right"]:
                    # Look for a storage with the same x coordinate
                    for storage in remaining_storages:
                        if storage[0] == box[0]:  
                            assignments[box] = (storage, calculate_manhattan_distance_with_obstacles(box, storage, state.obstacles))
                            remaining_storages.remove(storage)
                            remaining_boxes.remove(box)
                            break 

                elif edge_type in ["top", "bottom"]:
                    # Look for a storage with the same y coordinate
                    for storage in remaining_storages:
                        if storage[1] == box[1]:  
                            
                            assignments[box] = (storage, calculate_manhattan_distance_with_obstacles(box, storage, state.obstacles))
                            remaining_storages.remove(storage)
                            remaining_boxes.remove(box)
                            break  

    f()

    for storage in remaining_storages:
        min_distance = float('inf')
        nearest_box = None
        
        for box in remaining_boxes:
            distance = calculate_manhattan_distance_with_obstacles(box, storage, state.obstacles)
            if distance < min_distance:
                min_distance = distance
                nearest_box = box
        
        assignments[nearest_box] = (storage, min_distance)
        if nearest_box is not None:
            remaining_boxes.remove(nearest_box)
    
    return assignments

def is_edge_box(box_pos, width, height):
    if box_pos[0] == 0:
        edge_type = "left"
    elif box_pos[0] == width - 1:
        edge_type = "right"
    elif box_pos[1] == 0:
        edge_type = "bottom"
    elif box_pos[1] == height - 1:
        edge_type = "top"
    else:
        return False, None  # Not an edge box

    return True, edge_type


def calculate_distance_to_nearest_robot(box_pos, robots):
    min_distance = float('inf')
    
    for robot_pos in robots:
        distance = abs(box_pos[0] - robot_pos[0]) + abs(box_pos[1] - robot_pos[1])
        min_distance = min(min_distance, distance)
    
    return min_distance

def generate_corners(width, height):
    corners = {(0, 0), (0, height - 1), (width - 1, 0), (width - 1, height - 1)}
    return corners